.#  Generate C++ source and make files for libbitcoin_explorer
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This file contains no localizable resources.
.#
.##############################################################################
.# This section is a GSL define/macro/function library.
.
.macro global.copyleft
/**
 * Copyright (c) 2011-2014 libbitcoin developers (see AUTHORS)
 *
 * This file is part of libbitcoin_explorer.
 *
 * libbitcoin_explorer is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License with
 * additional permissions to the one published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version. For more information see LICENSE.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
.endmacro
.
.macro global.primitives
#include <bitcoin/explorer/primitives/address.hpp>
#include <bitcoin/explorer/primitives/base16.hpp>
#include <bitcoin/explorer/primitives/base2.hpp>
#include <bitcoin/explorer/primitives/base58.hpp>
#include <bitcoin/explorer/primitives/btc.hpp>
#include <bitcoin/explorer/primitives/btc160.hpp>
#include <bitcoin/explorer/primitives/btc256.hpp>
#include <bitcoin/explorer/primitives/ec_private.hpp>
#include <bitcoin/explorer/primitives/ec_public.hpp>
#include <bitcoin/explorer/primitives/encoding.hpp>
#include <bitcoin/explorer/primitives/hashtype.hpp>
#include <bitcoin/explorer/primitives/hd_key.hpp>
#include <bitcoin/explorer/primitives/hd_priv.hpp>
#include <bitcoin/explorer/primitives/hd_pub.hpp>
#include <bitcoin/explorer/primitives/header.hpp>
#include <bitcoin/explorer/primitives/input.hpp>
#include <bitcoin/explorer/primitives/output.hpp>
#include <bitcoin/explorer/primitives/raw.hpp>
#include <bitcoin/explorer/primitives/script.hpp>
#include <bitcoin/explorer/primitives/stealth.hpp>
#include <bitcoin/explorer/primitives/transaction.hpp>
#include <bitcoin/explorer/primitives/wif.hpp>
#include <bitcoin/explorer/primitives/wrapper.hpp>
.endmacro
.
.function global.default_type(is_option, type)
.   bool_default = my.is_option & is_empty(my.type)
.   return normalize_type(if_else(bool_default, type_bool, my.type ? \
        type_string))
.endfunction
.
.function global.first_char(value)
.   return string.substr(my.value, 0, 0)
.endfunction
.
.function global.if_else(antecedent, consequent, alternate)
.   return my.antecedent ?? my.consequent ? my.alternate
.endfunction
.
.function global.if_else_empty(antecedent, consequent)
.   return if_else(my.antecedent, my.consequent, "")
.endfunction
.
.function global.is_default(value, fallback)
.   return conv.number(my.value ? my.fallback) = my.fallback
.endfunction
.
.function global.is_empty(value)
.   return ((my.value ? "") = "")
.endfunction
.
.function global.is_xml_true(value)
.   return ((my.value ? xml_false) = xml_true)
.endfunction
.
.function global.last_char(value)
.   position = string.length(my.value)
.   character = string.substr(my.value, position, position)
.   return character
.endfunction
.
.# TODO: hash table
.function global.normalize_type(type)
.   if my.type = type_address
.       return type_address_bx
.   elsif my.type = type_base16
.       return type_base16_bx
.   elsif my.type = type_base2
.       return type_base2_bx
.   elsif my.type = type_base58
.       return type_base58_bx
.   elsif my.type = type_btc
.       return type_btc_bx
.   elsif my.type = type_btc160
.       return type_btc160_bx
.   elsif my.type = type_btc256
.       return type_btc256_bx
.   elsif my.type = type_ec_private
.       return type_ec_private_bx
.   elsif my.type = type_ec_public
.       return type_ec_public_bx
.   elsif my.type = type_encoding
.       return type_encoding_bx
.   elsif my.type = type_file
.       return type_file_bx
.   elsif my.type = type_hashtype
.       return type_hashtype_bx
.   elsif my.type = type_hd_key
.       return type_hd_key_bx
.   elsif my.type = type_hd_private
.       return type_hd_private_bx
.   elsif my.type = type_hd_public
.       return type_hd_public_bx
.   elsif my.type = type_header
.       return type_header_bx
.   elsif my.type = type_input
.       return type_input_bx
.   elsif my.type = type_output
.       return type_output_bx
.   elsif my.type = type_path
.       return type_path_boost
.   elsif my.type = type_point
.       return type_point_bx
.   elsif my.type = type_raw
.       return type_raw_bx
.   elsif my.type = type_script
.       return type_script_bx
.   elsif my.type = type_stealth
.       return type_stealth_bx
.   elsif my.type = type_string
.       return type_string_std
.   elsif my.type = type_transaction
.       return type_transaction_bx
.   elsif my.type = type_wif
.       return type_wif_bx
.   elsif my.type = type_wrapper
.       return type_wrapper_bx
.   endif
.   return my.type
.endfunction
.
.function global.pluralize(name, is_plural)
.   if (my.is_plural)
.#BUGBUG: the string comparison just doesn't work.
.       return my.name + if_else_empty(last_char(my.name) = "s", "e") + "s"
.   endif
.   return my.name
.endfunction
.
.function global.pretty(text, format)
.   return "$(my.text:$(my.format))"
.endfunction
.
.function global.quote(text, is_quoted)
.   return if_else(my.is_quoted, "\"$(my.text:)\"", my.text)
.endfunction
.
.function global.resource(name, fallback)
.   for resource
.       for resource.string
.           if (name ? "") = my.name
.               return value ? ""
.           endif
.       endfor
.   endfor
.   return my.fallback ? ""
.endfunction
.
.function global.true()
.   return 0 = 0
.endfunction
.
.function global.value_semantic(is_file, is_option, type, required,\
    unlimited, variable, fallback)
.
.   def_type = default_type(my.is_option, my.type)
.   norm_type = if_else(my.is_file, type_string_std, def_type)
.   implicit_bool = my.is_option & (norm_type = type_bool)
.   defaulted = !is_empty(my.fallback)
.   is_text = ((norm_type = type_path_boost) | (norm_type = type_string_std))
.   quote_default = (defaulted & is_text)
.
.   norm_unlimited = my.unlimited & !my.is_file
.   parameter = if_else_empty(!is_empty(my.variable), "&$(my.variable:)")
.   binding = if_else(my.is_file, "", pluralize(parameter, norm_unlimited))
.   default_value = quote(if_else_empty(defaulted, my.fallback), quote_default)
.
.   expr = "value<$(vectored_type(norm_type, norm_unlimited))>($(binding:))"
.   expr += if_else_empty(my.required, "->required()")
.   expr += if_else_empty(defaulted, "->default_value($(default_value:))")
.   expr += if_else_empty(implicit_bool, "->implicit_value(true)")
.   return expr
.
.endfunction
.
.function global.vectored_type(type, is_vector)
.   return if_else(my.is_vector, "std::vector<$(my.type:)>", my.type)
.endfunction
.
.config_description = resource("BX_CONFIG_DESCRIPTION")
.config_option = "config"
.type_bool = "bool"
.type_address = "address"
.type_base16 = "base16"
.type_base2 = "base2"
.type_base58 = "base58"
.type_btc = "btc"
.type_btc160 = "btc160"
.type_btc256 = "btc256"
.type_ec_private = "ec_private"
.type_ec_public = "ec_public"
.type_encoding = "encoding"
.type_file = "file"
.type_hashtype = "hashtype"
.type_hd_key = "hd_key"
.type_hd_private = "hd_private"
.type_hd_public = "hd_public"
.type_header = "header"
.type_input = "input"
.type_output = "output"
.type_point = "point"
.type_path = "path"
.type_raw = "raw"
.type_script = "script"
.type_stealth = "stealth"
.type_string = "string"
.type_transaction = "transaction"
.type_wif = "wif"
.type_wrapper = "wrapper"
.
.type_address_bx = "primitives::address"
.type_base16_bx = "primitives::base16"
.type_base2_bx = "primitives::base2"
.type_base58_bx = "primitives::base58"
.type_btc_bx = "primitives::btc"
.type_btc160_bx = "primitives::btc160"
.type_btc256_bx = "primitives::btc256"
.type_ec_private_bx = "primitives::ec_private"
.type_ec_public_bx = "primitives::ec_public"
.type_encoding_bx = "primitives::encoding"
.type_file_bx = "primitives::file"
.type_hashtype_bx = "primitives::hashtype"
.type_hd_key_bx = "primitives::hd_key"
.type_hd_private_bx = "primitives::hd_priv"
.type_hd_public_bx = "primitives::hd_pub"
.type_header_bx = "primitives::header"
.type_input_bx = "primitives::input"
.type_output_bx = "primitives::output"
.type_path_boost = "boost::filesystem::path"
.type_point_bx = "primitives::point"
.type_raw_bx = "primitives::raw"
.type_script_bx = "primitives::script"
.type_stealth_bx = "primitives::stealth"
.type_string_std = "std::string"
.type_transaction_bx = "primitives::transaction"
.type_wif_bx = "primitives::wif"
.type_wrapper_bx = "primitives::wrapper"
.
.xml_false = "false"
.xml_true = "true"
.
.##############################################################################
.echo "Generating include/bitcoin/explorer/generated.hpp..."
.output "../include/bitcoin/explorer/generated.hpp"
.copyleft()
#ifndef BX_GENERATED_HPP
#define BX_GENERATED_HPP

#include <functional>
#include <memory>
#include <string>
#include <bitcoin/explorer/command.hpp>
.for command by symbol
#include <bitcoin/explorer/commands/$(symbol).hpp>
.endfor

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

namespace libbitcoin {
namespace explorer {
.for resource
.   for string by name
.       if first()

/**
 * Various shared localizable strings.
 */
.       endif
#define $(NAME:c) \\
    "$(value:)"
.   endfor
.endfor

/**
 * Invoke a specified function on all commands.
 * @param[in]  func  The function to invoke on all commands.
 */
void broadcast(const std::function<void(std::shared_ptr<command>)> func);

/**
 * Find the command identified by the specified symbolic command name.
 * @param[in]  symbol  The symbolic command name.
 * @return             An instance of the command or nullptr if not found.
 */
std::shared_ptr<command> find(const std::string& symbol);

} // namespace explorer
} // namespace libbitcoin

#endif
.##############################################################################
.echo "Generating src/generated.cpp..."
.output "../src/generated.cpp"
.copyleft()
// #include "precompile.hpp"
#include <bitcoin/explorer/generated.hpp>

#include <functional>
#include <memory>
#include <string>
#include <vector>
#include <bitcoin/explorer/command.hpp>

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

using namespace po;
using namespace std;
using namespace boost::filesystem;
    
namespace libbitcoin {
namespace explorer {
using namespace commands;

void broadcast(const function<void(shared_ptr<command>)> func)
{
.for command by symbol
    func(make_shared<$(symbol:c)>());
.endfor
}

shared_ptr<command> find(const string& symbol)
{
.for command by symbol
    if (symbol == $(symbol:c)::symbol())
        return make_shared<$(symbol:c)>();
.endfor

    return nullptr;
}

} // namespace explorer
} // namespace libbitcoin
.##############################################################################
.echo "Generating include/bitcoin/explorer/command.hpp..."
.output "../include/bitcoin/explorer/command.hpp"
.copyleft()
#ifndef BX_COMMAND_HPP
#define BX_COMMAND_HPP

#include <iostream>
#include <string>
#include <vector>
#include <boost/filesystem.hpp>
#include <boost/program_options.hpp>
#include <bitcoin/explorer/define.hpp>
.primitives()
#include <bitcoin/explorer/utility/config.hpp>
#include <bitcoin/explorer/utility/utility.hpp>

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

namespace libbitcoin {
namespace explorer {

#define BX_CONFIG_VARIABLE "config"
#define BX_HELP_VARIABLE "help"

/**
 * Abstract base class for definition of each Bitcoin Explorer command.
 */
class command
{
public:
    
    /**
     * The symbolic (not localizable) command name, lower case.
     */
    static const char* symbol() { return "not-implemented"; }

    /**
     * The symbolic (not localizable) command name, lower case.
     * @return  Example: "fetch-transaction"
     */
    virtual const char* name()
    {
        return symbol();
    }

    /**
     * The localizable command category name, upper case.
     * @return  Example: "ONLINE"
     */
    virtual const char* category()
    {
        return symbol();
    }
    
    /**
     * Invoke the command.
     * @param[out]  output  The input stream for the command execution.
     * @param[out]  error   The input stream for the command execution.
     * @return              The appropriate console return code { -1, 0, 1 }.
     */
    virtual console_result invoke(std::ostream& output, std::ostream& error)
    {
        return console_result::failure;
    }

    /**
     * Load command argument definitions.
     * A value of -1 indicates that the number of instances is unlimited.
     * @return  The loaded argument definitions.
     */
    virtual po::positional_options_description& load_arguments()
    {
        return argument_metadata_;
    }

    /**
     * Load environment variable definitions.
     * @param[out] definitions  The defined program argument definitions.
     */
    virtual void load_environment(po::options_description& definitions)
    {
        using namespace po;
        definitions.add_options()
            /* This composes with the command line options. */
            (
                BX_CONFIG_VARIABLE, 
                value<boost::filesystem::path>()
                    ->composing()->default_value(config_default()),
                "$(config_description:)"
            );
    }
    
    /**
     * Load parameter fallbacks from file or input as appropriate.
     * @param[in]  input      The input stream for loading the parameters.
     * @param[in]  variables  The loaded variables.
     */
    virtual void load_fallbacks(std::istream& input, 
        po::variables_map& variables)
    {
    }

    /**
     * Load command option definitions.
     * The implicit_value call allows flags to be strongly-typed on read while
     * allowing but not requiring a value on the command line for the option.
     * BUGBUG: see boost bug/fix: svn.boost.org/trac/boost/ticket/8009
     * @return  The loaded option definitions.
     */
    virtual po::options_description& load_options()
    {
        return option_metadata_;
    }
    
    /**
     * Load configuration setting definitions.
     * @param[out] definitions  The defined program argument definitions.
     */
    virtual void load_settings(po::options_description& definitions)
    {
        using namespace po;
        definitions.add_options()
.for configuration
.   is_last_configuration = last()
.   for setting
.       is_last_setting = is_last_configuration & last()
.       identifiers = section + "." + name
.       variable = "setting_." + pretty(section, "lower,c") + "." +\
            pretty(name, "lower,c")
.       expression = value_semantic(!true(), !true(), type,\
            is_xml_true(required), is_xml_true(multiple), variable, default)
            (
                "$(identifiers:)",
                $(expression),
                "$(description:)"
            )$(is_last_setting ?? ";")
.   endfor
.endfor
    }
	
    /**
     * Load streamed value as parameter fallback.
     * @param[in]  input      The input stream for loading the parameter.
     * @param[in]  variables  The loaded variables.
     */
    virtual void load_stream(std::istream& input, po::variables_map& variables)
    {
    }

    /**
     * Write the usage help for this command to the specified stream.
     * @param[out] stream  The output stream.
     */
    virtual void write_usage(std::ostream& stream)
    {
        const auto options = get_option_metadata();
        const auto arguments = get_argument_metadata();
    } 
    
    /* Properties */
    
    /**
     * Get command line argument metadata.
     */
    virtual po::positional_options_description& get_argument_metadata()
    {
        return argument_metadata_;
    }
    
    /**
     * Get command line option metadata.
     */
    virtual po::options_description& get_option_metadata()
    {
        return option_metadata_;
    }

.for configuration
.   for setting
.       is_vector = is_xml_true(multiple)
.       setting_type = default_type(!true(), type)
.       vectored_type = vectored_type(setting_type, is_vector)
.       pluralized_name = pluralize(name, is_vector)
.       pluralized_setting = pluralize("setting", is_vector)
    /**
     * Get the value of the $(section:c).$(name:) $(pluralized_setting:).
     */
    virtual $(vectored_type:) get_$(section:c)_$(pluralized_name:c)_setting()
    {
        return setting_.$(section:c).$(pluralized_name:c);
    }

    /**
     * Set the value of the $(section:c).$(name:) $(pluralized_setting:).
     */
    virtual void set_$(section:c)_$(pluralized_name:c)_setting($(vectored_type:) value)
    {
        setting_.$(section:c).$(pluralized_name:c) = value;
    }
    
.   endfor
.endfor
protected:

    /**
     * This base class is abstract but not pure virtual, so prevent direct 
     * construction here.
     */
    command()
    {
    }
    
private:
    
    /**
     * Command line argument metadata.
     */
    po::positional_options_description argument_metadata_;

    /**
     * Command line option metadata.
     */
    po::options_description option_metadata_;
    
    /**
     * Environment variable bound variables.
     * Uses cross-compiler safe constructor-based zeroize.
     * Zeroize for unit test consistency with program_options initialization.
     */
    struct environment
    {
        environment()
        {
        }
        
.# There is no reason to expose the config path, as the config has been read.
.#      boost::filesystem::path config;
    } environment_;

    /**
     * Configuration setting file bound variables.
     * Uses cross-compiler safe constructor-based zeroize.
     * Zeroize for unit test consistency with program_options initialization.
     */
    struct setting
    {
.for configuration
        struct $(section:c)
        {
            $(section:c)()
.   for setting
.       is_vector = is_xml_true(multiple)
.       pluralized_name = pluralize(name, is_vector)
              $(if_else(first(), ":", " ")) $(pluralized_name:c)()$(!last() ?? ",")
.   endfor
            {
            }
            
.   for setting
.       is_vector = is_xml_true(multiple)
.       setting_type = default_type(!true(), type)
.       vectored_type = vectored_type(setting_type, is_vector)
.       pluralized_name = pluralize(name, is_vector)
            $(vectored_type:) $(pluralized_name:c);
.   endfor
        } $(section:c);

.endfor
        setting()
.for configuration
          $(if_else(first(), ":", " ")) $(section:c)()$(!last() ?? ",")
.endfor
        {
        }
    } setting_;
};

} // namespace explorer
} // namespace libbitcoin

#endif
.##############################################################################
.for command by symbol
.echo "Generating include/bitcoin/explorer/commands/$(symbol).hpp..."
.output "../include/bitcoin/explorer/commands/$(symbol).hpp"
.copyleft()
#ifndef BX_$(SYMBOL:c)_HPP
#define BX_$(SYMBOL:c)_HPP

#include <cstdint>
#include <iostream>
#include <string>
#include <vector>
#include <boost/program_options.hpp>
#include <bitcoin/bitcoin.hpp>
#include <bitcoin/explorer/command.hpp>
#include <bitcoin/explorer/define.hpp>
#include <bitcoin/explorer/generated.hpp>
.primitives()
#include <bitcoin/explorer/utility/compat.hpp>
#include <bitcoin/explorer/utility/config.hpp>
#include <bitcoin/explorer/utility/utility.hpp>

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

namespace libbitcoin {
namespace explorer {
namespace commands {
.for define
.   if first()

/**
 * Various localizable strings.
 */
.   endif
#define $(NAME:c) \\
    "$(value:)"
.endfor

/**
 * Class to implement the $(symbol:) command.
 */
class $(symbol:c) 
    : public command
{
public:

    /**
     * The symbolic (not localizable) command name, lower case.
     */
    static const char* symbol() { return "$(symbol:)"; }

    /**
     * The member symbolic (not localizable) command name, lower case.
     */
    virtual const char* name()
    {
        return $(symbol:c)::symbol();
    }

    /**
     * The localizable command category name, upper case.
     */
    virtual const char* category()
    {
        return "$(category:)";
    }

.
.# HACK: There must be a better way to count a collection.
.argument_count = 0
.for argument
.   argument_count += 1
.endfor
.option_count = 0
.for option
.   option_count += 1
.endfor
.
    /**
     * Load program argument definitions.
     * A value of -1 indicates that the number of instances is unlimited.
     * @return  The loaded program argument definitions.
     */
    virtual arguments_metadata& load_arguments()
    {
        return get_argument_metadata()$(if_else_empty(argument_count = 0, ";"))
.for argument
            .add("$(name:)", $(limit ? "1"))$(last() ?? ";")
.endfor
    }
	
	/**
     * Load parameter fallbacks from file or input as appropriate.
     * @param[in]  input  The input stream for loading the parameters.
     * @param[in]         The loaded variables.
     */
    virtual void load_fallbacks(std::istream& input, 
        po::variables_map& variables)
    {
.for argument
.   is_vector = !is_default(limit, 1)
.   argument_type = default_type(!true(), type)
.   pluralized_name = pluralize(name, is_vector)
.   getter = "get_" + "$(pluralized_name:c)" + "_argument()"
.#   bool_vector = if_else(is_vector, xml_true, xml_false)
.   if (is_xml_true(argument.file))
        load_path($(getter), "$(name:)", variables);
.   endif
.   if (is_xml_true(argument.stdin))
        load_input($(getter), "$(name:)", variables, input);
.   endif
.endfor
.for option
.   is_vector = is_xml_true(multiple)
.   option_type = default_type(true(), type)
.   pluralized_name = pluralize(name, is_vector)
.   getter = "get_" + "$(pluralized_name:c)" + "_option()"
.#   bool_vector = if_else(is_vector, xml_true, xml_false)
.   if (is_xml_true(option.file))
        //load_path($(getter), "$(name:)", variables);
.   endif
.   if (is_xml_true(option.stdin))
        //load_input($(getter), "$(name:)", variables, input);
.   endif
.endfor
    }
    
    /**
     * Load program option definitions.
     * The implicit_value call allows flags to be strongly-typed on read while
     * allowing but not requiring a value on the command line for the option.
     * BUGBUG: see boost bug/fix: svn.boost.org/trac/boost/ticket/8009
     * @return  The loaded program option definitions.
     */
    virtual options_metadata& load_options()
    {
        using namespace po;
        options_description& options = get_option_metadata();
        options.add_options()
            (
                BX_CONFIG_VARIABLE ",c",
                value<boost::filesystem::path>(),
                "$(config_description:)"
            )
.# TODO: How to block the description so as not to exceed max line length?
.for option
.   short_name = shortcut ? first_char(name)
.   identifiers = name
.   identifiers += if_else(short_name = "", "", "," + short_name)
.   variable = "option_." + pretty(name, "lower,c")
.   expression = value_semantic(is_xml_true(option.file), true(), type,\
        is_xml_true(required), is_xml_true(multiple), variable, default)
            (
                "$(identifiers:)",
                $(expression:),
                "$(description:)"
            )$((last() & (argument_count = 0)) ?? ";")
.endfor
.for argument
.   variable = "argument_." + pretty(name, "lower,c")
.   expression = value_semantic(is_xml_true(argument.file), !true(), type,\
        is_xml_true(required), !is_default(limit, 1), variable)
            (
                "$(name:)",
                $(expression:),
                "$(description:)"
            )$(last() ?? ";")
.endfor

        return options;
    }

    /**
     * Invoke the command.
     * @param[out]  output  The input stream for the command execution.
     * @param[out]  error   The input stream for the command execution.
     * @return              The appropriate console return code { -1, 0, 1 }.
     */
    virtual console_result invoke(std::ostream& output, std::ostream& cerr);
        
    /* Properties */

.for argument
.   is_vector = !is_default(limit, 1)
.   argument_type = default_type(!true(), type)
.   vtype = vectored_type(argument_type, is_vector)
.   pluralized_name = pluralize(name, is_vector)
.   pluralized_argument = pluralize("argument", is_vector)
    /**
     * Get the value of the $(name:) $(pluralized_argument:).
     */
    virtual $(vtype:)& get_$(pluralized_name:c)_argument()
    {
        return argument_.$(pluralized_name:c);
    }
    
    /**
     * Set the value of the $(name:) $(pluralized_argument:).
     */
    virtual void set_$(pluralized_name:c)_argument(
        const $(vtype:)& value)
    {
        argument_.$(pluralized_name:c) = value;
    }

.endfor
.for option
.   is_vector = is_xml_true(multiple)
.   option_type = default_type(true(), type)
.   vtype = vectored_type(option_type, is_vector)
.   pluralized_name = pluralize(name, is_vector)
.   pluralized_option = pluralize("option", is_vector)
    /**
     * Get the value of the $(name:) $(pluralized_option:).
     */
    virtual $(vtype:)& get_$(pluralized_name:c)_option()
    {
        return option_.$(pluralized_name:c);
    }
    
    /**
     * Set the value of the $(name:) $(pluralized_option:).
     */
    virtual void set_$(pluralized_name:c)_option(
        const $(vtype:)& value)
    {
        option_.$(pluralized_name:c) = value;
    }

.endfor
private:

    /**
     * Command line argument bound variables.
     * Uses cross-compiler safe constructor-based zeroize.
     * Zeroize for unit test consistency with program_options initialization.
     */
    struct argument
    {
        argument()
.for argument
.   is_vector = !is_default(limit, 1)
.   pluralized_name = pluralize(name, is_vector)
          $(if_else(first(), ":", " ")) $(pluralized_name:c)()$(!last() ?? ",")
.   endfor
        {
        }
        
.for argument
.   is_vector = !is_default(limit, 1)
.   argument_type = default_type(!true(), type)
.   vector_type = vectored_type(argument_type, is_vector)        
.   pluralized_name = pluralize(name, is_vector)
        $(vector_type:) $(pluralized_name:c);
.endfor            
    } argument_;
    
    /**
     * Command line option bound variables.
     * Uses cross-compiler safe constructor-based zeroize.
     * Zeroize for unit test consistency with program_options initialization.
     */
    struct option
    {
        option()
.for option
.   is_vector = is_xml_true(multiple)
.   pluralized_name = pluralize(name, is_vector)
          $(if_else(first(), ":", " ")) $(pluralized_name:c)()$(!last() ?? ",")
.endfor
        {
        }
        
.for option
.   is_vector = is_xml_true(multiple)
.   option_type = default_type(true(), type)
.   vector_type = vectored_type(option_type, is_vector)
.   pluralized_name = pluralize(name, is_vector)
        $(vector_type:) $(pluralized_name:c);
.endfor
    } option_;
};

} // namespace commands
} // namespace explorer
} // namespace libbitcoin

#endif
.endfor
.##############################################################################
.echo "Generating test/generated__broadcast.cpp..."
.output "../test/generated__broadcast.cpp"
.copyleft()
// #include "precompile.hpp"
#include <boost/test/unit_test.hpp>

#include <bitcoin/explorer.hpp>

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

BOOST_AUTO_TEST_SUITE(generated)
BOOST_AUTO_TEST_SUITE(generated__broadcast)

BOOST_AUTO_TEST_CASE(generated__broadcast__always__does_not_throw)
{
    // TODO: mocks and dependency injection required to test proper execution.
    auto func = [](std::shared_ptr<bc::explorer::command> command) -> void {};
    bc::explorer::broadcast(func);
}

BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()
.##############################################################################
.echo "Generating test/generated__find.cpp..."
.output "../test/generated__find.cpp"
.copyleft()
// #include "precompile.hpp"
#include <boost/test/unit_test.hpp>

#include <bitcoin/explorer.hpp>

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

using namespace bc::explorer;
using namespace bc::explorer::commands;

BOOST_AUTO_TEST_SUITE(generated)
BOOST_AUTO_TEST_SUITE(generated__find)
.for command by symbol

BOOST_AUTO_TEST_CASE(generated__find__$(symbol:c)__returns_object)
{
    BOOST_REQUIRE(find($(symbol:c)::symbol()) != nullptr);
}
.endfor

BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()
.##############################################################################
.echo "Generating test/generated__symbol.cpp..."
.output "../test/generated__symbol.cpp"
.copyleft()
// #include "precompile.hpp"
#include <boost/test/unit_test.hpp>

#include <bitcoin/explorer.hpp>

/********* GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY **********/

using namespace bc::explorer;
using namespace bc::explorer::commands;

BOOST_AUTO_TEST_SUITE(generated)
BOOST_AUTO_TEST_SUITE(generated__symbol)
.for command by symbol

BOOST_AUTO_TEST_CASE(generated__symbol__$(symbol:c)__returns_expected_value)
{
    BOOST_REQUIRE($(symbol:c)::symbol() == std::string("$(symbol:)"));
}
.endfor

BOOST_AUTO_TEST_SUITE_END()
BOOST_AUTO_TEST_SUITE_END()
.##############################################################################
.echo "Generating include/bitcoin/Makefile.am..."
.output "../include/bitcoin/Makefile.am"
# ******** GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY ********* #

bitcoin_includedir = $\(includedir)/bitcoin
bitcoin_include_HEADERS = \\
    explorer.hpp
    
bitcoin_explorer_includedir = $\(includedir)/bitcoin/explorer
bitcoin_explorer_include_HEADERS = \\
    explorer/async_client.hpp \\
    explorer/callback_state.hpp \\
    explorer/command.hpp \\
    explorer/define.hpp \\
    explorer/dispatch.hpp \\
    explorer/display.hpp \\
    explorer/generated.hpp \\
    explorer/obelisk_client.hpp \\
    explorer/prop_tree.hpp

bitcoin_explorer_impl_includedir = $\(includedir)/bitcoin/explorer/impl
bitcoin_explorer_impl_include_HEADERS = \\
    explorer/impl/prop_tree.ipp \\
    explorer/impl/utility.ipp

bitcoin_explorer_utility_includedir = $\(includedir)/bitcoin/explorer/utility
bitcoin_explorer_utility_include_HEADERS = \\
    explorer/utility/compat.hpp \\
    explorer/utility/config.hpp \\
    explorer/utility/environment.hpp \\
    explorer/utility/parameter.hpp \\
    explorer/utility/printer.hpp \\
    explorer/utility/utility.hpp

bitcoin_explorer_primitives_includedir = $\(includedir)/bitcoin/explorer/primitives
bitcoin_explorer_primitives_include_HEADERS = \\
    explorer/primitives/address.hpp \\
    explorer/primitives/base16.hpp \\
    explorer/primitives/base2.hpp \\
    explorer/primitives/base58.hpp \\
    explorer/primitives/btc.hpp \\
    explorer/primitives/btc160.hpp \\
    explorer/primitives/btc256.hpp \\
    explorer/primitives/ec_private.hpp \\
    explorer/primitives/ec_public.hpp \\
    explorer/primitives/encoding.hpp \\
    explorer/primitives/hashtype.hpp \\
    explorer/primitives/hd_key.hpp \\
    explorer/primitives/hd_priv.hpp \\
    explorer/primitives/hd_pub.hpp \\
    explorer/primitives/header.hpp \\
    explorer/primitives/input.hpp \\
    explorer/primitives/output.hpp \\
    explorer/primitives/point.hpp \\
    explorer/primitives/raw.hpp \\
    explorer/primitives/script.hpp \\
    explorer/primitives/stealth.hpp \\
    explorer/primitives/transaction.hpp \\
    explorer/primitives/wif.hpp \\
    explorer/primitives/wrapper.hpp

# Generated from XML data source.
bitcoin_explorer_commands_includedir = $\(includedir)/bitcoin/explorer/commands
bitcoin_explorer_commands_include_HEADERS = \\
.for command by symbol
    explorer/commands/$(symbol:).hpp$(!last() ?? " \\")
.endfor
.##############################################################################
.echo "Generating src/Makefile.am..."
.output "../src/Makefile.am"
# ******** GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY ********* #

AUTOMAKE_OPTIONS = subdir-objects

# Library
noinst_LTLIBRARIES = libbitcoin_explorer.la

AM_CPPFLAGS = \\
    -I$\(srcdir)/../include \\
    ${bitcoin_client_CFLAGS}

libbitcoin_explorer_la_SOURCES = \\
    async_client.cpp \\
    callback_state.cpp \\
    dispatch.cpp \\
    display.cpp \\
    generated.cpp \\
    obelisk_client.cpp \\
    prop_tree.cpp \\
    primitives/address.cpp \\
    primitives/base16.cpp \\
    primitives/base2.cpp \\
    primitives/base58.cpp \\
    primitives/btc.cpp \\
    primitives/btc160.cpp \\
    primitives/btc256.cpp \\
    primitives/ec_private.cpp \\
    primitives/ec_public.cpp \\
    primitives/encoding.cpp \\
    primitives/hashtype.cpp \\
    primitives/hd_key.cpp \\
    primitives/hd_priv.cpp \\
    primitives/hd_pub.cpp \\
    primitives/header.cpp \\
    primitives/input.cpp \\
    primitives/output.cpp \\
    primitives/point.cpp \\
    primitives/raw.cpp \\
    primitives/script.cpp \\
    primitives/stealth.cpp \\
    primitives/transaction.cpp \\
    primitives/wif.cpp \\
    primitives/wrapper.cpp \\
    utility/config.cpp \\
    utility/environment.cpp \\
    utility/parameter.cpp \\
    utility/printer.cpp \\
    utility/utility.cpp

# Generated from XML data source.
libbitcoin_explorer_la_SOURCES += \\
.for command by symbol
    commands/$(symbol:).cpp$(!last() ?? " \\")
.endfor
    
libbitcoin_explorer_la_LIBADD = \\
    ${bitcoin_client_LIBS}

# Console Application
bin_PROGRAMS = explorer

explorer_SOURCES = \\
    console/main.cpp

explorer_LDADD = \\
    -L$\(srcdir)/../src/ \\
    -lbitcoin_explorer \\
    -lboost_chrono \\
    -lboost_program_options \\
    ${bitcoin_client_LIBS}
.##############################################################################
.echo "Generating test/Makefile.am..."
.output "../test/Makefile.am"
# ******** GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY ********* #

AUTOMAKE_OPTIONS = subdir-objects

noinst_PROGRAMS = explorer_test

AM_CPPFLAGS = \\
    -I$\(srcdir)/../include \\
    ${bitcoin_client_CFLAGS} \\
    -DBOOST_TEST_DYN_LINK

explorer_test_SOURCES = \\
    address.cpp \\
    base58.cpp \\
    generated__broadcast.cpp \\
    generated__find.cpp \\
    generated__symbol.cpp \\
    main.cpp \\
    obelisk_client.cpp \\
    parameter.cpp \\
    printer.cpp

# Generated from XML data source.
explorer_test_SOURCES += \\
.for command by symbol
    commands/$(symbol:).cpp$(!last() ?? " \\")
.endfor

explorer_test_LDADD = \\
    -L$\(srcdir)/../src/ \\
    -lbitcoin_explorer \\
    -lboost_chrono \\
    -lboost_program_options \\
    ${bitcoin_client_LIBS}
.##############################################################################
.echo "Generating builds/msvc/vs2013/libbitcoin_explorer/libbitcoin_explorer.vcxproj..."
.output "../builds/msvc/vs2013/libbitcoin_explorer/libbitcoin_explorer.vcxproj"
<?xml version="1.0" encoding="utf-8"?>
<!--
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#################################################################
-->
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <NuGetPackageImportStamp>82a52cd0</NuGetPackageImportStamp>
    <PlatformToolset>CTP_Nov2013</PlatformToolset>
    <ProjectGuid>{4A1D71D5-3DEE-47F0-A189-21C301E2808F}</ProjectGuid>
    <ProjectName>libbitcoin_explorer</ProjectName>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDLL|Win32">
      <Configuration>DebugDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|Win32">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDLL|x64">
      <Configuration>DebugDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDLL|x64">
      <Configuration>ReleaseDLL</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|Win32">
      <Configuration>DebugLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|Win32">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLTCG|x64">
      <Configuration>DebugLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLTCG|x64">
      <Configuration>ReleaseLTCG</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|Win32">
      <Configuration>DebugLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|Win32">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLIB|x64">
      <Configuration>DebugLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLIB|x64">
      <Configuration>ReleaseLIB</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Configuration">
    <ConfigurationType Condition="$\(Configuration.IndexOf('DLL')) == -1">StaticLibrary</ConfigurationType>
    <ConfigurationType Condition="$\(Configuration.IndexOf('DLL')) != -1">DynamicLibrary</ConfigurationType>
  </PropertyGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.Default.props" />
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.props" />
  <ImportGroup Label="PropertySheets">
    <Import Project="$\(ProjectDir)..\\..\\properties\\$\(Configuration).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\Output.props" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
  </ImportGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\impl\\prop_tree.ipp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\impl\\utility.ipp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\callback_state.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\async_client.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\command.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\define.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\dispatch.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\display.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\generated.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\obelisk_client.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\prop_tree.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\address.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\base16.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\base2.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\base58.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\btc.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\btc160.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\btc256.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\ec_private.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\ec_public.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\encoding.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hashtype.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hd_key.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hd_priv.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hd_pub.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\header.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\input.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\output.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\point.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\raw.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\script.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\stealth.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\transaction.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\wif.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\wrapper.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\compat.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\config.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\environment.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\parameter.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\printer.hpp" />
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\utility.hpp" />
  </ItemGroup>
  <ItemGroup>
.for command by symbol
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\commands\\$(symbol:).hpp" />
.endfor
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="..\\..\\..\\..\\src\\async_client.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\callback_state.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\dispatch.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\display.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\generated.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\obelisk_client.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\prop_tree.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\address.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\base16.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\base2.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\base58.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\btc.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\btc160.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\btc256.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\ec_private.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\ec_public.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\encoding.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hashtype.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hd_key.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hd_priv.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hd_pub.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\header.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\input.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\output.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\point.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\raw.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\script.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\stealth.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\transaction.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\wif.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\wrapper.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\config.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\environment.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\parameter.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\printer.cpp" />
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\utility.cpp" />
  </ItemGroup>
  <ItemGroup>
.for command by symbol
    <ClCompile Include="..\\..\\..\\..\\src\\commands\\$(symbol:).cpp" />
.endfor
  </ItemGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets" />
  <ImportGroup Label="ExtensionSettings">
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem.1.56.0.0\\build\\native\\boost_filesystem.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem.1.56.0.0\\build\\native\\boost_filesystem.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets')" />
  </ImportGroup>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem.1.56.0.0\\build\\native\\boost_filesystem.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem.1.56.0.0\\build\\native\\boost_filesystem.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets'))" />
  </Target>
</Project>
.##############################################################################
.echo "Generating builds/msvc/vs2013/libbitcoin_explorer/libbitcoin_explorer.vcxproj.filter..."
.output "../builds/msvc/vs2013/libbitcoin_explorer/libbitcoin_explorer.vcxproj.filters"
<?xml version="1.0" encoding="utf-8"?>
<!--
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#################################################################
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include="include\\bitcoin\\explorer\\commands">
      <UniqueIdentifier>{8f3f62c0-53c7-4044-a1da-c3fcc9d27651}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer\\commands\\network">
      <UniqueIdentifier>{E9B42E1D-5F9D-41FA-AB9B-75D15069071C}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer\\commands\\obsolete">
      <UniqueIdentifier>{268700C7-1C9D-44FF-B1CE-3104893288A4}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer\\commands\\stub">
      <UniqueIdentifier>{1A3D8C7D-8801-42D9-8420-A7E95CD259AE}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer\\impl">
      <UniqueIdentifier>{d34fd634-a274-4629-8a8f-c588117d9733}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer\\primitives">
      <UniqueIdentifier>{3857250F-34CC-43E4-9781-68B9E01BBD9D}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer\\utility">
      <UniqueIdentifier>{dc28e2c9-d07d-4242-8007-e44440c133a0}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin\\explorer">
      <UniqueIdentifier>{31B4AAFD-BE8B-45EF-BCDC-B696C320F9F5}</UniqueIdentifier>
    </Filter>
    <Filter Include="include\\bitcoin">
      <UniqueIdentifier>{f75d4585-8ee2-45e8-96ec-880c63fc243e}</UniqueIdentifier>
    </Filter>
    <Filter Include="include">
      <UniqueIdentifier>{86400492-13FA-494A-87E4-1E33C7EB2476}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\commands\\network">
      <UniqueIdentifier>{4085fba5-b358-4b3f-968f-ee8be943775f}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\commands\\obsolete">
      <UniqueIdentifier>{DF81EBEE-BB03-406B-B4C5-1D9FD2964E97}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\commands\\stub">
      <UniqueIdentifier>{e96f4bef-2d18-4897-9078-a8c17783ee65}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\commands">
      <UniqueIdentifier>{4085fba5-b358-4b3f-968f-ee8be943775f}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\primitives">
      <UniqueIdentifier>{6CE1C682-2E57-4EA8-B819-5C733184121A}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\utility">
      <UniqueIdentifier>{c50b43cf-9009-45a6-b813-7a61877602f4}</UniqueIdentifier>
    </Filter>
    <Filter Include="src">
      <UniqueIdentifier>{6afc4dd0-6330-4dca-b176-cd4887f27b9f}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
.for command by symbol
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\commands\\$(symbol:).hpp">
.   if (is_xml_true(stub))
      <Filter>include\\bitcoin\\explorer\\commands\\stub</Filter>
.   elsif (is_xml_true(network))
      <Filter>include\\bitcoin\\explorer\\commands\\network</Filter>
.   elsif (is_xml_true(obsolete))
      <Filter>include\\bitcoin\\explorer\\commands\\obsolete</Filter>
.   else
      <Filter>include\\bitcoin\\explorer\\commands</Filter>
.   endif
    </ClInclude>
.endfor
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\impl\\utility.ipp">
      <Filter>include\\bitcoin\\explorer\\impl</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\impl\\prop_tree.ipp">
      <Filter>include\\bitcoin\\explorer\\impl</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\address.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\base16.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\base2.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\base58.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\btc.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\btc160.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\btc256.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\ec_private.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\ec_public.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hd_key.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\encoding.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hashtype.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hd_priv.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\hd_pub.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\header.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\input.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\output.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\point.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\raw.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\script.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\stealth.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\transaction.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\wif.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\primitives\\wrapper.hpp">
      <Filter>include\\bitcoin\\explorer\\primitives</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\compat.hpp">
      <Filter>include\\bitcoin\\explorer\\utility</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\config.hpp">
      <Filter>include\\bitcoin\\explorer\\utility</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\environment.hpp">
      <Filter>include\\bitcoin\\explorer\\utility</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\parameter.hpp">
      <Filter>include\\bitcoin\\explorer\\utility</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\printer.hpp">
      <Filter>include\\bitcoin\\explorer\\utility</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\utility\\utility.hpp">
      <Filter>include\\bitcoin\\explorer\\utility</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\async_client.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\callback_state.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\command.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\define.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\dispatch.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\display.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\generated.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\obelisk_client.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer\\prop_tree.hpp">
      <Filter>include\\bitcoin\\explorer</Filter>
    </ClInclude>
    <ClInclude Include="..\\..\\..\\..\\include\\bitcoin\\explorer.hpp">
      <Filter>include\\bitcoin</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
.for command by symbol
    <ClCompile Include="..\\..\\..\\..\\src\\commands\\$(symbol:).cpp">
.   if (is_xml_true(stub))
      <Filter>src\\commands\\stub</Filter>
.   elsif (is_xml_true(network))
      <Filter>src\\commands\\network</Filter>
.   elsif (is_xml_true(obsolete))
      <Filter>src\\commands\\obsolete</Filter>
.   else
      <Filter>src\\commands</Filter>
.   endif
    </ClCompile>
.endfor
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\address.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\base16.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\base2.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\base58.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\btc.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\btc160.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\btc256.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\ec_private.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\ec_public.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hashtype.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hd_key.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\encoding.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hd_priv.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\hd_pub.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\header.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\input.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\output.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\point.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\raw.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\script.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\stealth.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\transaction.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\wif.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\primitives\\wrapper.cpp">
      <Filter>src\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\config.cpp">
      <Filter>src\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\environment.cpp">
      <Filter>src\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\parameter.cpp">
      <Filter>src\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\printer.cpp">
      <Filter>src\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\utility\\utility.cpp">
      <Filter>src\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\async_client.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\callback_state.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\dispatch.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\display.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\generated.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\obelisk_client.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\src\\prop_tree.cpp">
      <Filter>src</Filter>
    </ClCompile>
  </ItemGroup>
</Project>
.##############################################################################
.##############################################################################
.echo "Generating builds/msvc/vs2013/libbitcoin_explorer_test/libbitcoin_explorer_test.vcxproj..."
.output "../builds/msvc/vs2013/libbitcoin_explorer_test/libbitcoin_explorer_test.vcxproj"
<?xml version="1.0" encoding="utf-8"?>
<!--
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#################################################################
-->
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup Label="Globals">
    <ConfigurationType>Application</ConfigurationType>
    <NuGetPackageImportStamp>5e4dc238</NuGetPackageImportStamp>
    <PlatformToolset>CTP_Nov2013</PlatformToolset>
    <ProjectGuid>{1A0E5EDD-E803-4268-9DFB-044EB80BB0F1}</ProjectGuid>
    <ProjectName>libbitcoin_explorer_test</ProjectName>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="DebugDEXE|Win32">
      <Configuration>DebugDEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDEXE|Win32">
      <Configuration>ReleaseDEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugDEXE|x64">
      <Configuration>DebugDEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseDEXE|x64">
      <Configuration>ReleaseDEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLEXE|Win32">
      <Configuration>DebugLEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLEXE|Win32">
      <Configuration>ReleaseLEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugLEXE|x64">
      <Configuration>DebugLEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseLEXE|x64">
      <Configuration>ReleaseLEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugSEXE|Win32">
      <Configuration>DebugSEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseSEXE|Win32">
      <Configuration>ReleaseSEXE</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="DebugSEXE|x64">
      <Configuration>DebugSEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="ReleaseSEXE|x64">
      <Configuration>ReleaseSEXE</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.Default.props" />
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.props" />
  <ImportGroup Label="PropertySheets">
    <Import Project="$\(ProjectDir)..\\..\\properties\\$\(Configuration).props" />
    <Import Project="$\(ProjectDir)..\\..\\properties\\Output.props" />
    <Import Project="$\(ProjectDir)$\(ProjectName).props" />
  </ImportGroup>
  <ItemGroup>
    <ClCompile Include="..\\..\\..\\..\\test\\address.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\base58.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\generated__broadcast.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\generated__find.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\generated__symbol.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\main.cpp">
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\obelisk_client.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\parameter.cpp" />
    <ClCompile Include="..\\..\\..\\..\\test\\printer.cpp" />
  </ItemGroup>
  <ItemGroup>
.for command by symbol
    <ClCompile Include="..\\..\\..\\..\\test\\commands\\$(symbol:).cpp" />
.endfor
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\..\\..\\test\\commands\\command.hpp" />
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <Import Project="$\(VCTargetsPath)\\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets" />
  <ImportGroup Label="ExtensionSettings">
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_unit_test_framework-vc120.1.56.0.0\\build\\native\\boost_unit_test_framework-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_unit_test_framework-vc120.1.56.0.0\\build\\native\\boost_unit_test_framework-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_date_time-vc120.1.56.0.0\\build\\native\\boost_date_time-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_date_time-vc120.1.56.0.0\\build\\native\\boost_date_time-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_chrono-vc120.1.56.0.0\\build\\native\\boost_chrono-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_chrono-vc120.1.56.0.0\\build\\native\\boost_chrono-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets')" />
    <Import Project="..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets" Condition="Exists('..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets')" />
  </ImportGroup>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Enable NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\libgmp_vc120.5.1.3.2\\build\\native\\libgmp_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_filesystem-vc120.1.56.0.0\\build\\native\\boost_filesystem-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_program_options-vc120.1.56.0.0\\build\\native\\boost_program_options-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_regex-vc120.1.56.0.0\\build\\native\\boost_regex-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_unit_test_framework-vc120.1.56.0.0\\build\\native\\boost_unit_test_framework-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_unit_test_framework-vc120.1.56.0.0\\build\\native\\boost_unit_test_framework-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost.1.56.0.0\\build\\native\\boost.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_date_time-vc120.1.56.0.0\\build\\native\\boost_date_time-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_date_time-vc120.1.56.0.0\\build\\native\\boost_date_time-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_chrono-vc120.1.56.0.0\\build\\native\\boost_chrono-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_chrono-vc120.1.56.0.0\\build\\native\\boost_chrono-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\boost_system-vc120.1.56.0.0\\build\\native\\boost_system-vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\libzmq_vc120.4.1.0.7\\build\\native\\libzmq_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\czmq_vc120.2.2.0.8\\build\\native\\czmq_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\czmqpp_vc120.1.0.0.10\\build\\native\\czmqpp_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\libsodium_vc120.0.6.0.1\\build\\native\\libsodium_vc120.targets'))" />
    <Error Condition="!Exists('..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets')" Text="$\([System.String]::Format('$\(ErrorText)', '..\\..\\..\\..\\..\\..\\nuget\\secp256k1_gmp_vc120.0.1.0.2\\build\\native\\secp256k1_gmp_vc120.targets'))" />
  </Target>
  <ItemGroup>
    <ProjectReference Include="..\\libbitcoin_explorer\\libbitcoin_explorer.vcxproj">
      <Project>{4A1D71D5-3DEE-47F0-A189-21C301E2808F}</Project>
    </ProjectReference>
  </ItemGroup>
</Project>
.##############################################################################
.echo "Generating builds/msvc/vs2013/libbitcoin_explorer_test/libbitcoin_explorer_test.vcxproj.filter..."
.output "../builds/msvc/vs2013/libbitcoin_explorer_test/libbitcoin_explorer_test.vcxproj.filters"
<?xml version="1.0" encoding="utf-8"?>
<!--
#################################################################
#   GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY    #
#################################################################
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <Filter Include="src">
      <UniqueIdentifier>{3eb17572-0d1e-4c0f-b582-bdc503608456}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests">
      <UniqueIdentifier>{272f2634-0335-488d-8741-271dd38c6092}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests\\commands">
      <UniqueIdentifier>{854c3ba2-ea3e-45ba-a329-75b1c9545712}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests\\commands\\network">
      <UniqueIdentifier>{30ec4ed5-e76c-45cd-a4c1-2da55271a06b}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests\\commands\\obsolete">
      <UniqueIdentifier>{930d925a-aab0-4934-96a2-3766c01a2793}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests\\commands\\stub">
      <UniqueIdentifier>{44ca92b4-d241-4677-aac2-0bb85bd9a990}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests\\primitives">
      <UniqueIdentifier>{14f110d7-6526-4899-bddb-d390b0ca55ae}</UniqueIdentifier>
    </Filter>
    <Filter Include="src\\tests\\utility">
      <UniqueIdentifier>{ad3dcd3b-991e-438d-84e2-58b47c198365}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
.for command by symbol
    <ClCompile Include="..\\..\\..\\..\\test\\commands\\$(symbol:).cpp">
.   if (is_xml_true(stub))
      <Filter>src\\tests\\commands\\stub</Filter>
.   elsif (is_xml_true(network))
      <Filter>src\\tests\\commands\\network</Filter>
.   elsif (is_xml_true(obsolete))
      <Filter>src\\tests\\commands\\obsolete</Filter>
.   else
      <Filter>src\\tests\\commands</Filter>
.   endif
    </ClCompile>
.endfor
    <ClCompile Include="..\\..\\..\\..\\test\\address.cpp">
      <Filter>src\\tests\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\base58.cpp">
      <Filter>src\\tests\\primitives</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\parameter.cpp">
      <Filter>src\\tests\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\printer.cpp">
      <Filter>src\\tests\\utility</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\generated__broadcast.cpp">
      <Filter>src\\tests</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\generated__find.cpp">
      <Filter>src\\tests</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\generated__symbol.cpp">
      <Filter>src\\tests</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\main.cpp">
      <Filter>src</Filter>
    </ClCompile>
    <ClCompile Include="..\\..\\..\\..\\test\\obelisk_client.cpp">
      <Filter>src\\tests</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\\..\\..\\..\\test\\commands\\command.hpp">
      <Filter>src\\tests\\commands</Filter>
    </ClInclude>
  </ItemGroup>
</Project>
.#################################################################################