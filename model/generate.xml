<?xml version = "1.0" ?>
<generate script="generate.gsl" language="en-us">
  
  <!-- Help resources. -->
  
  <help>
    <shorthand name="BTC" description="Bitcoin Denomination" />
    <shorthand name="BX" description="Bitcoin Explorer" />
    <shorthand name="EC" description="Elliptic Curve" />
    <shorthand name="HD" description="Hierarchical Deterministic" />
    <shorthand name="PUBKEY" description="EC Public Key" />
    <shorthand name="QRCODE" description="Quick Response Code" />
    <shorthand name="RACE" description="Research and development in Advanced Communications Technologies" />
    <shorthand name="RIPEMD" description="RACE Integrity Primitives Evaluation Message Digest" />
    <shorthand name="SHA" description="Secure Hash Algorithm" />
    <shorthand name="SOCKS" description="Socket Secure (proxy protocol)" />
    <shorthand name="SX" description="Spesmilo Exchanger (the original version of Bitcoin Explorer)" />
    <shorthand name="TX" description="Transaction" />
    <shorthand name="UTXO" description="Unspent Transaction Output" />
    <shorthand name="WIF" description="Wallet Import Format" />
  </help>
  
  <!-- Configuration file sections. -->
  
  <configuration section="general">
    <!-- NOTE: we could move this into the obelisk section if it was dynamic. -->
    <!-- NOTE: we probably shouldn't use this setting since the fact is compiled into dependencies. -->
    <setting name="testnet" type="bool" default="false" description="Set to true for testnet operation. This option is EXPERIMENTAL because other libraries on which this application depends must currently be compiled with the testnet flag to ensure complete testnet semantics." />
  </configuration>
  
  <configuration section="logging">
    <setting name="debug" type="path" default="debug.log" description="The file and path name to the debug log file." />
    <setting name="error" type="path" default="error.log" description="The file and path name to the error log file." />
  </configuration>
  
  <configuration section="server">
    <!-- TODO: create primitive for URI and use for socks-proxy and address. -->
    <setting name="certificate" type="path" description="The path to a private key certificate (file) that the server can use to prove the identity of this client. This is useful in authorizing remote administration of the server. The associated public key would need to be known by the server. Use the CZMQ program 'makecert' to generate the key certificate. For example: /home/genjix/.explorer.cert" />
    <setting name="public-key" type="base16" description="The public key of the server to which this application may connect. This must be the key for server specified by the 'service' option. For example: W=GRFxHUuUN#En3MI]f{}X:KWnV=pRZ$((byg=:h" />
    <setting name="address" default="tcp://obelisk.unsystem.net:8081" description="The URI of the server to which this application may connect." />
    <setting name="socks-proxy" description="The host name and port number of a Socks5 proxy server." />
  </configuration>
  
  <!-- General resources. -->
  <resource>
    <string name="BX_INVALID_COMMAND" value="'%1%' is not a bx command. Enter 'bx help' for a list of commands." />
    <string name="BX_INVALID_PARAMETER" value="Error: %1%" />
    <string name="BX_CONFIG_DESCRIPTION" value="The path and file name for the configuration settings file to be used in the execution of the command." />
    <string name="BX_LISTED_COMMAND_NAME" value="%1%" />
  </resource>

  <!-- Bitcoin Explorer Commands -->

  <command symbol="address-decode" formerly="decode-addr" typeX="wrapper" category="WALLET">
    <option name="help" description="Convert a Bitcoin address to RIPEMD160, dropping the version." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="BITCOIN_ADDRESS" stdin="true" type="address" description="The Bitcoin address to convert."/>
  </command>
  
  <command symbol="address-embed" formerly="embed-addr" typeX="address" category="WALLET">
    <option name="help" description="Generate a Bitcoin address with an embedded record of binary data." />
    <option name="version" type="uint8_t" description="The desired Bitcoin address version." />
    <argument name="DATA" stdin="true" type="raw" description="The binary data to encode as Base16. This can be text or any other data." />
  </command>

  <command symbol="address-encode" formerly="encode-addr" typeX="address" category="WALLET">
    <option name="help" description="Convert a RIPEMD160 value to a Bitcoin address." />
    <option name="version" type="uint8_t" description="The desired Bitcoin address version." />
    <argument name="RIPEMD160" stdin="true" type="btc160" description="The Base16 hash to convert."/>
  </command>

  <command symbol="address-validate" formerly="validaddr" typeX="address" multipleX="true" category="WALLET">
    <option name="help" description="Validate an address. Returns the address if is valid." />
    <argument name="BITCOIN_ADDRESS" stdin="true" type="string" description="The Bitcoin address to validate." />
    <define name="BX_ADDRESS_VALIDATE_INVALID_ADDRESS" value="The signature is not invalid." />
  </command>

  <command symbol="base58check-decode" typeX="wrapper" category="HASH">
    <option name="help" description="Convert a Base58Check value to Base16." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="BASE58CHECK" stdin="true" type="base58" description="The Base58Check value to decode." />
  </command>
  
  <command symbol="base16-decode" typeX="raw" category="HASH">
    <option name="help" description="Convert a Base16 value to binary data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 value to decode as binary data." />
  </command>

  <command symbol="base16-encode" typeX="base16" category="HASH">
    <option name="help" description="Convert binary data to Base16." />
    <argument name="DATA" stdin="true" type="raw" description="The binary data to encode as Base16. This can be text or any other data." />
  </command>

  <command symbol="base58check-encode" typeX="base58" category="HASH">
    <option name="help" description="Convert a Base16 value to Base58Check." />
    <option name="version" type="uint8_t" description="The desired version number." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 value to Base58Check encode." />
  </command>
  
  <command symbol="base58-decode" typeX="base16" category="HASH">
    <option name="help" description="Convert a Base58 value to Base16." />
    <argument name="BASE58" stdin="true" type="base58" description="The Base58 value to decode as Base16." />
  </command>

  <command symbol="base58-encode" typeX="base58" category="HASH">
    <option name="help" description="Convert a Base16 value to Base58." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 value to encode as Base58." />
  </command>
  
  <command symbol="bci-fetch-last-height" category="ONLINE" obsolete="true">
    <option name="help" description="Get the last block height from blockchain.info." />
    <define name="BX_BCI_FETCH_LAST_HEIGHT_OBSOLETE" value="This command is no longer supported. Use fetch-height." />
  </command>

  <command symbol="bci-history" category="ONLINE" obsolete="true">
    <option name="help" description="Get the list of outputs, values and spends for an address from blockchain.info." />
    <define name="BX_BCI_HISTORY_OBSOLETE" value="This command is no longer supported. Use fetch-history." />
  </command>

  <command symbol="bitcoin160" typeX="base16" category="HASH">
    <option name="help" description="Perform a RIPEMD160 hash of a SHA256 hash of Base16 data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 data to hash."/>
  </command>

  <command symbol="bitcoin256" typeX="base16" category="HASH">
    <option name="help" description="Perform a SHA256 hash of a SHA256 hash of Base16 data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 data to hash."/>
  </command>

  <command symbol="blke-fetch-transaction" category="ONLINE" obsolete="true">
    <option name="help" description="Get a Bitcoin transaction from blockexplorer.com." />
    <define name="BX_BLKE_FETCH_TRANSACTION_OBSOLETE" value="This command is no longer supported. Use fetch-tx." />
  </command>

  <command symbol="btc-to-satoshi" typeX="uint64_t" category="MATH">
    <option name="help" description="Convert BTC to satoshi." />
    <argument name="BTC" stdin="true" type="btc" description="The number of BTC to convert."/>
  </command>

  <!-- TODO: ensure proper handling of Unicode PASSPHRASE. -->
  <command symbol="ec-lock" formerly="brainwallet" typeX="ec_private" category="WALLET" stub="true">
    <option name="help" description="Make a passphrase-protected EC private key (BIP38) from an EC private key." />
    <argument name="EC_PRIVATE_KEY" required="true" type="ec_private" description="The EC private key." />
    <argument name="PASSPHRASE" required="true" description="The Unicode passphrase." />
    <define name="BX_EC_LOCK_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
   
  <command symbol="ec-add" formerly="ec-tweak-add" typeX="ec_public" category="MATH">
    <option name="help" description="Calculate the EC function POINT + (SECRET * curve-generator-point)." />
    <argument name="POINT" required="true" type="ec_public" description="The Base16 EC point to add."/>
    <argument name="SECRET" required="true" type="ec_private" description="The Base16 EC secret to add."/>
    <define name="BX_EC_ADD_OUT_OF_RANGE" value="Function exceeds valid range." />
  </command>

  <command symbol="ec-add-secrets" formerly="ec-add-modp" typeX="ec_private" category="MATH">
    <option name="help" description="Calculate the EC function (SECRET + SECRET) % curve-order." />
    <argument name="SECRET" stdin="true" limit="-1" type="ec_private" description="The set of Base16 secrets to add."/>
    <define name="BX_EC_ADD_SECRETS_OUT_OF_RANGE" value="Sum exceeds valid range." />
  </command>

  <command symbol="ec-multiply" typeX="ec_public" category="MATH">
    <option name="help" description="Calculate the EC product (POINT * SECRET)." />
    <argument name="POINT" required="true" type="ec_public" description="The Base16 EC point to multiply."/>
    <argument name="SECRET" required="true" type="ec_private" description="The Base16 EC secret to multiply."/>
    <define name="BX_EC_MULITPLY_OUT_OF_RANGE" value="Product exceeds valid range." />
  </command>
  
  <command symbol="ec-multiply-secrets" formerly="ec-add" typeX="ec_private" category="MATH">
    <option name="help" description="Calculate the EC function (SECRET * SECRET) % curve-order." />
    <argument name="SECRET" stdin="true" limit="-1" type="ec_private" description="The set of Base16 EC secrets to multiply."/>
    <define name="BX_EC_MULITPLY_SECRETS_OUT_OF_RANGE" value="Function exceeds valid range." />
  </command>

  <command symbol="ec-new" formerly="newkey" typeX="ec_private" category="WALLET">
    <option name="help" description="Create a new EC private key from entropy." />
    <argument name="SEED" stdin="true" type="base16" description="The Base16 randomness seed for the new key. Must be at least 128 bits in length." />
    <define name="BX_EC_NEW_SHORT_SEED" value="The seed is less than 128 bits long." />
    <define name="BX_EC_NEW_INVALID_KEY" value="The seed produced an invalid key." />
  </command>
  
  <command symbol="ec-to-address" formerly="addr" typeX="address" category="WALLET">
    <option name="help" description="Convert an EC public key to a Bitcoin address." />
    <option name="version" type="uint8_t" description="The desired Bitcoin address version." />
    <argument name="EC_PUBLIC_KEY" stdin="true" type="ec_public" description="The Base16 EC public key to convert." />
  </command>

  <command symbol="ec-to-public" formerly="pubkey" typeX="ec_public" category="WALLET">
    <option name="help" description="Derive the EC public key of an EC private key. Defaults to the compressed public key format." />
    <option name="uncompressed" description="Derive using the uncompressed public key format." />
    <argument name="EC_PRIVATE_KEY" stdin="true" type="ec_private" description="The Base16 EC private key."/>
  </command>
  
  <command symbol="ec-to-wif" typeX="wif" category="WALLET">
    <option name="help" description="Convert an EC private key to a WIF private key. The result associates with the compressed public key format by default." />
    <option name="uncompressed" description="Associate the result with the uncompressed public key format." />
    <argument name="EC_PRIVATE_KEY" stdin="true" type="ec_private" description="The Base16 EC private key to convert."/>
  </command>
  
  <!-- TODO: ensure proper handling of Unicode PASSPHRASE. -->
  <command symbol="ec-unlock" typeX="ec_private" category="WALLET" stub="true">
    <option name="help" description="Extract the EC private key from a passphrase-protected (BIP38) EC private key." />
    <argument name="PASSPHRASE" required="true" description="The Unicode passphrase." />
    <define name="BX_EC_UNLOCK_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="fetch-balance" typeX="balance_row" multipleX="true" category="ONLINE" network="true">
    <option name="help" description="Get the balance in satoshi of one or more Bitcoin addresses. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="BITCOIN_ADDRESS" stdin="true" limit="-1" type="address" description="The set of Bitcoin addresses." />
  </command>

  <command symbol="fetch-confirmations" formerly="validtx" typeX="string" multipleX="true" category="ONLINE" network="true">
    <option name="help" description="Get confirmations for a set of transactions. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="TRANSACTION" file="true" stdin="true" limit="-1" type="transaction" description="The file path of the set of Base16 transactions. If not specified the transactions are read from STDIN."/>
    <define name="BX_FETCH_CONFIRMATIONS_OUTPUT" value="[%1%] Confirmations: %2%" />    
  </command>

  <command symbol="fetch-header" category="ONLINE" typeX="header" network="true">
    <option name="help" description="Get the block header from the specified hash or height. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <option name="hash" shortcut="s" type="btc256" description="The Base16 block hash."/>
    <option name="height" shortcut="t" type="size_t" description="The block height."/>
  </command>

  <command symbol="fetch-height" formerly="fetch-last-height" typeX="size_t" category="ONLINE" network="true">
    <option name="help" description="Get the last block height. Requires an Obelisk server connection." />
  </command>
  
  <command symbol="fetch-history" typeX="history_row" multipleX="true" category="ONLINE" network="true">
    <option name="help" description="Get list of output points, values, and spends for one or more Bitcoin addresses. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="BITCOIN_ADDRESS" stdin="true" limit="-1" type="address" description="The set of Bitcoin addresses." />
    <define name="BX_FETCH_HISTORY_PENDING" value="Pending" />
    <define name="BX_FETCH_HISTORY_UNSPENT" value="Unspent" />
  </command>
  
  <command symbol="fetch-public-key" formerly="get-pubkey" typeX="ec_public" category="ONLINE" stub="true" network="true">
    <option name="help" description="Get the EC public key of the address, if it exists on the blockchain. Requires an Obelisk server connection." />
    <argument name="BITCOIN_ADDRESS" stdin="true" type="address" description="The Bitcoin address of the public key."/>
    <define name="BX_FETCH_PUBLIC_KEY_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="fetch-stealth" typeX="stealth_row" multipleX="true" category="ONLINE" network="true">
    <option name="help" description="Get metadata on potential payment transactions by stealth prefix. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <option name="height" shortcut="t" type="size_t" description="The minimum block height of transactions to include."/>
    <!--<option name="scan_secret" type="ec_private" description="The Base16 EC private key to use locally in confirming stealth transactions."/>
    <option name="scan_pubkey" shortcut="p" type="ec_public" description="The Base16 EC public key to use locally in confirming stealth transactions."/>-->
    <argument name="PREFIX" stdin="true" limit="-1" type="base2" description="The set of  Base2 stealth prefixes used to locate transactions." />
  </command>

  <command symbol="fetch-tx" formerly="fetch-transaction" typeX="transaction" multipleX="true" category="ONLINE" network="true">
    <option name="help" description="Get transactions by filter. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <option name="height" shortcut="t" type="size_t" description="The minimum block height of prefix transactions to get."/>
    <argument name="HASH" stdin="true" limit="-1"  type="btc256" description="The set of Base16 transaction hashes of transactions to get." />
  </command>

  <command symbol="fetch-tx-index" formerly="fetch-transaction-index" typeX="string" multipleX="true" category="ONLINE" network="true">
    <option name="help" description="Get the block height and index of a transaction. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="HASH" stdin="true" limit="-1" type="btc256" description="The set of Base16 transaction hashes." />
    <define name="BX_FETCH_TX_INDEX_OUTPUT" value="[%1%] Height: %2% Index: %3%" /> 
  </command>

  <command symbol="fetch-utxo" formerly="get-utxo" typeX="output" multipleX="true" category="ONLINE" stub="true" network="true">
    <option name="help" description="Get enough unspent transaction outputs from a set of Bitcoin addresses to pay a number of satoshi. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="SATOSHI" type="uint64_t" required="true" description="The whole number of satoshi." />
    <argument name="BITCOIN_ADDRESS" stdin="true" limit="-1" type="address" description="The set of Bitcoin addresses." />
    <define name="BX_FETCH_UTXO_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="genaddr" category="ELECTRUM" obsolete="true">
    <option name="help" description="Generate a Bitcoin address deterministically from an Electrum wallet." />
    <define name="BX_GENADDR_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>
  
  <command symbol="genpriv" category="ELECTRUM" obsolete="true">
    <option name="help" description="Generate a private key deterministically from an Electrum seed." />
    <define name="BX_GENPRIV_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>

  <command symbol="genpub" category="ELECTRUM" obsolete="true">
    <option name="help" description="Generate a public key deterministically from an Electrum wallet." />
    <define name="BX_GENPUB_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>

  <command symbol="hd-new" formerly="hd-seed" typeX="hd_private" category="WALLET">
    <option name="help" description="Create a new HD (BIP32) private key from entropy." />
    <argument name="SEED" stdin="true" type="base16" description="The Base16 randomness seed for the new key. Must be at least 128 bits in length." />
    <define name="BX_HD_NEW_SHORT_SEED" value="The seed is less than 128 bits long." />
    <define name="BX_HD_NEW_INVALID_KEY" value="The seed produced an invalid key." />
  </command>

  <command symbol="hd-private" typeX="hd_private" category="WALLET">
    <option name="help" description="Derive a child HD (BIP32) private key from another HD private key." />
    <option name="hard" shortcut="d" description="Signal to create a hardened key." />
    <option name="index" type="uint32_t" description="The HD index, defaults to zero." />
    <argument name="HD_PRIVATE_KEY" stdin="true" type="hd_private" description="The parent HD private key." />
  </command>

  <command symbol="hd-public" typeX="hd_public" category="WALLET">
    <option name="help" description="Derive a child HD (BIP32) public key from another HD public or private key." />
    <option name="hard" shortcut="d" description="Signal to create a hardened key." />
    <option name="index" type="uint32_t" description="The HD index, defaults to zero." />
    <argument name="HD_PUBLIC_KEY" stdin="true" type="hd_key" description="The parent HD public or private key." />
    <define name="BX_HD_PUBLIC_HARD_OPTION_CONFLICT" value="The hard option requires a private key." />
  </command>

  <command symbol="hd-to-address" typeX="address" formerly="hd-to-address" category="WALLET">
    <option name="help" description="Convert a HD (BIP32) public or private key to a Bitcoin address." />
    <argument name="HD_KEY" stdin="true" type="hd_key" description="The HD public or private key to convert." />
  </command>

  <command symbol="hd-to-ec" typeX="ec_private" category="WALLET">
    <option name="help" description="Convert a HD (BIP32) public or private key to the equivalent EC public or private key." />
    <argument name="HD_KEY" stdin="true" type="hd_key" description="The HD public or private key to convert." />
  </command>
  
  <command symbol="hd-to-public" typeX="hd_public" category="WALLET">
    <option name="help" description="Derive the HD (BIP32) public key of a HD private key." />
    <argument name="HD_PRIVATE_KEY" stdin="true" type="hd_private" description="The HD private key." />
  </command>

  <command symbol="hd-to-wif" typeX="wif" category="WALLET">
    <option name="help" description="Convert a HD (BIP32) private key to a WIF private key." />
    <argument name="HD_PRIVATE_KEY" stdin="true" type="hd_private" description="The HD private key to convert." />
  </command>

  <command symbol="help" typeX="string" category="BX">
    <option name="help" description="Get the list of commands." />
    <argument name="COMMAND" stdin="true" description="The command for which help is requested." />
  </command>

  <command symbol="initchain" category="ONLINE" obsolete="true">
    <option name="help" description="Initialize a new blockchain database." />
    <define name="BX_INITCHAIN_OBSOLETE" value="Server administration tools are no longer supported." />
  </command>
  
  <command symbol="input-sign" formerly="sign-input" typeX="base16" category="TRANSACTION">
    <option name="help" description="Create a signature for a transaction input." />
    <option name="index" type="size_t" description="The ordinal position of the input within the transaction, defaults to zero." />
    <option name="signature_type" type="hashtype" description="A token that indicates how the transaction should be hashed for signing. Options are 'all', 'none', 'single', or 'anyone_can_pay', defaults to 'single'." />
    <argument name="TRANSACTION" file="true" required="true" type="transaction" description="The file path of the Base16 transaction."/>
    <argument name="EC_PRIVATE_KEY" required="true" type="ec_private" description="The Base16 EC private key to sign with."/>
    <argument name="NONCE" required="true" type="base16" description="The Base16 random value to be used as the signing nonce. Must be at least 128 bits in length." />
    <argument name="PREVIOUS_OUTPUT_SCRIPT" type="script" description="The previous output script to use in signing. If not specified the script is read from STDIN." />
    <define name="BX_INPUT_SIGN_SHORT_NONCE" value="The nonce is less than 128 bits long." />
    <define name="BX_INPUT_SIGN_INDEX_OUT_OF_RANGE" value="The index does not refer to an existing input." />
    <define name="BX_INPUT_SIGN_FAILED" value="The signing operation failed." />
  </command>
  
  <command symbol="input-set" formerly="set-input" typeX="transaction" category="TRANSACTION">
    <option name="help" description="Assign a script to an existing transaction input." />
    <option name="index" type="size_t" description="The ordinal position of the input within the transaction, defaults to zero." />
    <argument name="TRANSACTION" file="true" required="true" type="transaction" description="The file path of the Base16 transaction."/>
    <argument name="SIGNATURE_SCRIPT" type="script" description="The signature script to assign to the input. If not specified the script is read from STDIN." />
    <define name="BX_INPUT_SET_INDEX_OUT_OF_RANGE" value="The index does not refer to an existing input." />
  </command>
  
  <command symbol="input-validate" formerly="validsig" typeX="string" category="TRANSACTION">
    <option name="help" description="Validate a transaction signature." />
    <option name="index" type="size_t" description="The ordinal position of the input within the transaction, defaults to zero." />
    <option name="signature_type" type="hashtype" description="A token that indicates how the transaction was hashed for signing. Options are 'all', 'none', 'single', or 'anyone_can_pay', defaults to 'single'." />
    <argument name="TRANSACTION" file="true" required="true" type="transaction" description="The file path of the Base16 transaction."/>
    <argument name="EC_PUBLIC_KEY" required="true" type="ec_public" description="The Base16 EC public key to verify against."/>
    <argument name="PREVIOUS_OUTPUT_SCRIPT" required="true" type="script" description="The previous output script used in signing." />
    <argument name="SIGNATURE" type="base16" description="The Base16 signature to validate. If not specified the signature is read from STDIN."/>
    <define name="BX_INPUT_VALIDATE_INDEX_OUT_OF_RANGE" value="The index does not refer to an existing input." />
    <define name="BX_INPUT_VALIDATE_INDEX_VALID_SIGNATURE" value="The signature is valid." />
    <define name="BX_INPUT_VALIDATE_INDEX_INVALID_SIGNATURE" value="The signature is not valid." />
  </command>  
  
  <command symbol="mnemonic-decode" formerly="mnemonic" typeX="base16" category="WALLET">
    <option name="help" description="Convert an Electrum mnemonic to its seed. WARNING: mnemonic should be generated from a random seed. WARNING: This implementation is deprecated in favor of BIP39." />
    <argument name="WORD" stdin="true" limit="-1" description="The set of words from the Electrum word list." />
  </command>
  
  <command symbol="mnemonic-encode" formerly="mnemonic" typeX="string" multipleX="true" category="WALLET">
    <option name="help" description="Convert a seed to its Electrum mnemonic." />
    <argument name="SEED" stdin="true" type="base16" description="The Base16 randomness seed.  Must be at least 128 bits in length. WARNING: This implementation is deprecated in favor of BIP39." />
    <define name="BX_EC_MNEMONIC_ENCODE_SHORT_SEED" value="The seed is less than 128 bits long." />
  </command>
  
  <command symbol="mpk" category="ELECTRUM" obsolete="true">
    <option name="help" description="Extract a master public key from a deterministic wallet seed." />
    <define name="BX_MPK_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>

  <command symbol="newseed" category="ELECTRUM" obsolete="true">
    <option name="help" description="Create a new Electrum style deterministic wallet seed." />
    <define name="BX_NEWSEED_OBSOLETE" value="Electrum style key functions are obsolete. Use HD (BIP32) commands instead." />
  </command>
  
  <command symbol="qrcode" category="WALLET" typeX="raw" stub="true">
    <option name="help" description="Generate a QR code image file for a Bitcoin address." />
    <option name="file" type="string" description="The image file path. If not specified the image is written to STDOUT."/>
    <argument name="BITCOIN_ADDRESS" stdin="true" type="address" description="The Bitcoin address."/>
    <define name="BX_QRCODE_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="ripemd160" formerly="ripemd-hash" typeX="base16" category="HASH">
    <option name="help" description="Perform a RIPEMD160 hash of Base16 data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 data to hash."/>
  </command>

  <command symbol="satoshi-to-btc" typeX="btc" category="MATH">
    <option name="help" description="Convert satoshi to BTC." />
    <argument name="SATOSHI" stdin="true" type="uint64_t" description="The whole number of satoshi to convert."/>
  </command>
  
  <command symbol="script-decode" formerly="showscript" typeX="string" multipleX="true" category="SCRIPT">
    <option name="help" description="Decode a script to plain text tokens." />
    <argument name="SCRIPT" file="true" stdin="true" type="base16" description="The Base16 script."/>
  </command>
  
  <command symbol="script-encode" formerly="rawscript" typeX="base16" category="SCRIPT">
    <option name="help" description="Base16 encode a plain text script." />
    <argument name="TOKEN" stdin="true" limit="-1" type="string" description="The plain text script tokens that make up the script. If not specified the tokens are read from STDIN."/>
  </command>
  
  <command symbol="script-to-address" formerly="scripthash" typeX="address" category="SCRIPT">
    <option name="help" description="Create a BIP16 pay-to-script-hash address from an encoded script." />
    <argument name="SCRIPT" file="true" stdin="true" type="script" description="The script."/>
  </command>
  
  <command symbol="seed" typeX="base16" category="WALLET">
    <option name="help" description="Generate a pseudorandom seed." />
    <option name="bit_length" type="size_t" default="128" description="The length of the seed in bits. Must be divisible by 8 and must not be less than 128." />
    <define name="BX_SEED_BIT_LENGTH_UNSUPPORTED" value="The seed value is not supported." />
  </command>
  
  <command symbol="send-tx" formerly="sendtx-obelisk" typeX="string" category="ONLINE" network="true">
    <option name="help" description="Broadcast a transaction to the Bitcoin transaction pool via an Obelisk server." />
    <argument name="TRANSACTION" file="true" stdin="true" limit="-1" type="transaction" description="The file path of the set of Base16 transactions. If not specified the transactions are read from STDIN."/>
    <define name="BX_SEND_TX_OUTPUT" value="Sent transaction at %1%." />
  </command>
  
  <command symbol="send-tx-node" formerly="sendtx-node" typeX="string" category="ONLINE" network="true">
    <option name="help" description="Broadcast a transaction to the Bitcoin transaction pool via a single Bitcoin network node." />
    <option name="name" type="string" default="localhost" description="The IP address or DNS name of the node. Defaults to localhost." />
    <option name="port" type="uint16_t" default="8333" description="The IP port of the Bitcoin service on the node. Defaults to 8333, the standard for mainnet." />
    <argument name="TRANSACTION" file="true" stdin="true" limit="-1" type="transaction" description="The file path of the set of Base16 transactions. If not specified the transactions are read from STDIN."/>
    <define name="BX_SEND_TX_NODE_OUTPUT" value="Sent transaction %1% at %2%." />
  </command>

  <command symbol="send-tx-p2p" formerly="sendtx-p2p" typeX="string" category="ONLINE" network="true">
    <option name="help" description="Broadcast a transaction to the Bitcoin transaction pool via the Bitcoin peer-to-peer network." />
    <option name="nodes" type="size_t" default="2" description="The number of network nodes to send the transaction to, defaults to two." />
    <argument name="TRANSACTION" file="true" stdin="true" limit="-1" type="transaction" description="The file path of the set of Base16 transactions. If not specified the transactions are read from STDIN."/>
    <define name="BX_SEND_TX_P2P_SIGNAL" value="Caught signal: %1%" />
    <define name="BX_SEND_TX_P2P_START_OKAY" value="Started." />
    <define name="BX_SEND_TX_P2P_START_FAIL" value="Start failed: %1%" />
    <define name="BX_SEND_TX_P2P_CHECK_OKAY" value="%1% connections." />
    <define name="BX_SEND_TX_P2P_CHECK_FAIL" value="Check failed: %1%" />
    <define name="BX_SEND_TX_P2P_SETUP_OKAY" value="Sending %1%." />
    <define name="BX_SEND_TX_P2P_SETUP_FAIL" value="Setup failed: %1%" />
    <define name="BX_SEND_TX_P2P_SEND_OKAY" value="Sent at %1%." />
    <define name="BX_SEND_TX_P2P_SEND_FAIL" value="Send failed: %1%" />
  </command>
  
  <command symbol="sendtx-bci" category="ONLINE" obsolete="true">
    <option name="help" description="Broadcast a transaction to the Bitcoin transaction pool via blockchain.info." />
    <define name="BX_SENDTX_BCI_OBSOLETE" value="This command is no longer supported. Use send-tx, send-tx-node or send-tx-p2p." />
  </command>

  <command symbol="sha160" typeX="base16" category="HASH">
    <option name="help" description="Perform a SHA160 (also known as SHA-1) hash of Base16 data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 data to hash."/>
  </command>

  <command symbol="sha256" typeX="base16" category="HASH">
    <option name="help" description="Perform a SHA256 hash of Base16 data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 data to hash."/>
  </command>

  <command symbol="sha512" typeX="base16" category="HASH">
    <option name="help" description="Perform a SHA512 hash of Base16 data." />
    <argument name="BASE16" stdin="true" type="base16" description="The Base16 data to hash."/>
  </command>

  <command symbol="showblkhead" category="TRANSACTION" obsolete="true">
    <option name="help" description="Decode a block header." />
    <define name="BX_SHOWBLKHEAD_OBSOLETE" value="This command is obsolete. Use fetch-header with formatting instead." />
  </command>

  <command symbol="stealth-address-decode" formerly="stealth-show-addr" typeX="stealth" category="STEALTH">
    <option name="help" description="Decode a stealth address." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="STEALTH_ADDRESS" type="stealth" required="true" description="The stealth payment address." />
  </command>
  
  <command symbol="stealth-address-encode" typeX="stealth" category="STEALTH">
    <option name="help" description="Encode a stealth payment address." />
    <option name="prefix" type="base2" description="The Base2 stealth prefix that will be used to locate payments." />
    <option name="signatures" type="uint8_t" description="Specify the number of signatures required to spend a payment to the stealth address. Defaults to the number of SPEND_PUBKEYs." />
    <argument name="SCAN_PUBKEY" required="true" type="ec_public" description="The Base16 EC public key required to generate a payment." />
    <argument name="SPEND_PUBKEY" stdin="true" limit="-1" type="ec_public" description="The set of Base16 EC public keys corresponding to private keys that will be able to spend payments to the address. Defaults to the value of SCAN_EC_PUBLIC_KEY." />
    <define name="BX_STEALTH_ADDRESS_ENCODE_PREFIX_TOO_LONG" value="The prefix is limited to 32 bits." />
    <define name="BX_STEALTH_ADDRESS_ENCODE_SIGNATURES_OVERFLOW" value="The number of signatures is greater than the number of SPEND_PUBKEYs." />
    <define name="BX_STEALTH_ADDRESS_ENCODE_PREFIX_NOT_SUPPORTED" value="WARNING: prefix search is not yet fully supported." />
    <define name="BX_STEALTH_ADDRESS_ENCODE_MULTISIG_NOT_SUPPORTED" value="WARNING: multiple signature stealth transactions are not yet fully supported." />
  </command>

  <command symbol="stealth-newkey" category="STEALTH" obsolete="true">
    <option name="help" description="Generate new keys and the associated stealth address." />
    <define name="BX_STEALTH_NEWKEY_OBSOLETE" value="This command is no longer supported. Use stealth-address-encode." />
  </command>
  
  <command symbol="stealth-new" formerly="stealth-initiate" typeX="ec_public" category="STEALTH">
    <option name="help" description="Create a new stealth public key from which a payment address can be generated. A unique ephemeral secret should be used for each stealth payment." />
    <argument name="EPHEMERAL_SECRET" type="ec_private" description="The Base16 ephemeral EC private key used to generate stealth payment metadata." />
    <argument name="SCAN_PUBKEY" type="ec_public" description="The Base16 EC public key required to generate a stealth address." />
    <argument name="SPEND_PUBKEY" required="true" type="ec_public" description="A Base16 EC public key corresponding to a private key that can spend payments to the stealth address." />
  </command>

  <command symbol="stealth-uncover-public" formerly="stealth-uncover" typeX="ec_public" category="STEALTH">
    <option name="help" description="Derive the stealth public key necessary to identify a stealth payment." />
    <argument name="EPHEMERAL_PUBKEY" type="ec_public" description="The Base16 ephemeral EC public key retrieved from the stealth payment metadata." />
    <argument name="SCAN_SECRET" type="ec_private" description="The Base16 EC private key corresponding to the public key required to generate a stealth payment." />
    <argument name="SPEND_PUBKEY" required="true" type="ec_public" description="A Base16 EC public key corresponding to a private key that can spend payments to the stealth address." />
  </command>

  <command symbol="stealth-uncover-secret" typeX="ec_private" category="STEALTH">
    <option name="help" description="Derive the stealth private key necessary to spend a stealth payment." />
    <argument name="EPHEMERAL_PUBKEY" type="ec_public" description="The Base16 ephemeral EC public key retrieved from the stealth payment metadata." />
    <argument name="SCAN_SECRET" type="ec_private" description="The Base16 EC private key corresponding to the public key required to generate a stealth address." />
    <argument name="SPEND_SECRET" required="true" type="ec_private" description="A Base16 EC private key that can spend payments to the stealth address." />
  </command>

  <command symbol="stealth-shared-secret" typeX="ec_private" category="STEALTH">
    <option name="help" description="Derive the secret shared between an ephemeral key pair and a scan key pair. Provide scan secret and ephemeral public key or ephemeral secret and scan public key" />
    <argument name="SECRET" type="ec_private" description="A Base16 EC private key." />
    <argument name="PUBKEY" required="true" type="ec_public" description="A Base16 EC public key." />
  </command>
  
  <command symbol="tx-decode" typeX="transaction" multipleX="true" category="TRANSACTION">
    <option name="help" description="Decode a set of transactions." />
    <!-- The code generator does not yet have the ability to set default values requiring quotes, so native is currently the default. -->
    <option name="format" type="encoding" defaultX="info" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="TRANSACTION" file="true" stdin="true" limit="-1" type="transaction" description="The file path of the set of Base16 transactions. If not specified the transactions are read from STDIN."/>
  </command>

  <command symbol="tx-encode" typeX="transaction" category="TRANSACTION">
    <option name="help" description="Encode an unsigned transaction." />
    <option name="lock_time" type="uint32_t" description="The transaction lock time." />
    <option name="version" type="uint32_t" default="1" description="The transaction version." />
    <option name="input" multiple="true" type="input" description="The set of transaction input points encoded as TXHASH:INDEX:SEQUENCE. TXHASH is a Base16 transaction hash. INDEX is the 32 bit input index in the context of the transaction. SEQUENCE is the optional 32 bit input sequence and defaults to the maximum value." />
    <option name="output" multiple="true" type="output" description="The set of transaction output data encoded as TARGET:SATOSHI:SEED. TARGET is an address (including stealth or pay-to-script-hash) or a Base16 script. SATOSHI is the 32 bit spend amount in satoshi. SEED is required for stealth outputs and not used otherwise. The same seed should NOT be used for multiple outputs." />
    <argument name="TRANSACTION" description="The encoded transaction file path. If not specified the transaction is written to STDOUT."/>
    <define name="BX_TX_ENCODE_LOCKTIME_CONFLICT" value="The specified lock time is ineffective because all sequences are set to the maximum value." />
  </command>
  
  <!-- This was originally designed for PGP signing -->
  <command symbol="tx-sign" formerly="signtx" typeX="transaction" multipleX="true" category="TRANSACTION" stub="true">
    <option name="help"  description="Sign a set of transactions using a private key. Output is suitable for sending to Bitcoin network." />
    <argument name="EC_PRIVATE_KEY" required="true" type="ec_private" description="The EC private key to be used for signing." />
    <argument name="TRANSACTION" file="true" stdin="true" limit="-1" type="transaction" description="The file path of the set of Base16 transactions. If not specified the transactions are read from STDIN."/>
    <define name="BX_TX_SIGN_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>

  <command symbol="wallet" category="WALLET" obsolete="true">
    <option name="help" description="Experimental command line wallet." />
    <define name="BX_WALLET_OBSOLETE" value="This experimental command is no longer supported." />
  </command>

  <command symbol="watch-stealth" formerly="monitor" typeX="transaction" category="ONLINE" network="true">
    <option name="help" description="Watch the network for transactions by stealth prefix. Requires an Obelisk server connection. WARNING: THIS COMMAND IS EXPERIMENTAL." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <!--<option name="scan_secret" type="ec_private" description="The Base16 EC private key to use locally in confirming stealth transactions."/>
    <option name="scan_pubkey" shortcut="p" type="ec_public" description="The Base16 EC public key to use locally in confirming stealth transactions."/>-->
    <argument name="PREFIX" stdin="true" limit="-1" type="base2" description="The set of Base2 stealth prefixes to watch." />
    <define name="BX_WATCH_STEALTH_PREFIX_WAITING" value="Watching prefix: %1%..." />
    <define name="BX_WATCH_STEALTH_PREFIX_TOO_LONG" value="WARNING: prefix is limited to 32 bits." />
  </command>

  <command symbol="watch-tx" formerly="watchtx" typeX="transaction" category="ONLINE" network="true" stub="true">
    <option name="help" description="Watch the network for transactions by transaction hash. Requires an Obelisk server connection." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="HASH" stdin="true" limit="-1" type="btc256" description="The set of Base16 transaction hashes to watch." />
    <define name="BX_WATCH_TX_WAITING" value="Watching transaction: %1%..." />
    <define name="BX_WATCH_TX_NOT_IMPLEMENTED" value="This command is not yet implemented." />
  </command>
  
  <command symbol="wif-to-ec" typeX="ec_private" category="WALLET">
    <option name="help" description="Convert a WIF private key to an EC private key." />
    <argument name="WIF" stdin="true" type="wif" description="The value to convert."/>
  </command>
  
  <command symbol="wif-to-public" typeX="ec_public" category="WALLET">
    <option name="help" description="Derive the EC public key from a WIF private key." />
    <argument name="WIF" stdin="true" type="wif" description="The WIF private key."/>
  </command>

  <command symbol="wrap-decode" formerly="unwrap" typeX="wrapper" category="HASH">
    <option name="help" description="Validate the checksum of a Base16 data and recover its version byte and data." />
    <option name="format" type="encoding" description="The output format. Options are 'json', 'xml', 'info' or 'native', defaults to native." />
    <argument name="WRAPPED" stdin="true" type="wrapper" description="The Base16 data to unwrap." />
  </command>

  <command symbol="wrap-encode" formerly="wrap" typeX="wrapper" category="HASH">
    <option name="help" description="Add a version byte and checksum to Base16 data." />
    <option name="version" type="uint8_t" description="The desired version number." />
    <argument name="PAYLOAD" stdin="true" type="base16" description="The Base16 data to wrap." />
  </command>
  
</generate>
